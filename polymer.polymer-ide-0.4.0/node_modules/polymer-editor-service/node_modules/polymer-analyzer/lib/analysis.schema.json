{
    "type": "object",
    "properties": {
        "schema_version": {
            "type": "string"
        },
        "elements": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Element"
            }
        },
        "mixins": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ElementMixin"
            }
        }
    },
    "required": [
        "schema_version"
    ],
    "definitions": {
        "Element": {
            "type": "object",
            "properties": {
                "tagname": {
                    "description": "The tagname that the element registers itself as. e.g. `paper-input`",
                    "type": "string"
                },
                "classname": {
                    "description": "The class name for this element.\n\n\n\ne.g. `MyElement`, `Polymer.PaperInput`",
                    "type": "string"
                },
                "extends": {
                    "description": "The tagname that the element extends, if any. The value of the `extends`\n\noption that's passed into `customElements.define`.\n\n\n\ne.g. `input`, `paper-button`, `my-super-element`",
                    "type": "string"
                },
                "superclass": {
                    "description": "The class that this element extends.\n\n\n\nThis is non-optional, as every custom element must have HTMLElement in\n\nits prototype change.\n\n\n\ne.g. `HTMLElement`, `HTMLInputElement`, `MyNamespace.MyBaseElement`",
                    "type": "string"
                },
                "path": {
                    "description": "The path, relative to the base directory of the package.\n\n\n\ne.g. `paper-input.html` or `app-toolbar/app-toolbar.html` (given that\n\napp-toolbar lives in the app-layout package).",
                    "type": "string"
                },
                "description": {
                    "description": "A markdown description for the element.",
                    "type": "string"
                },
                "demos": {
                    "description": "Paths, relative to the base directory of the package, to demo pages for the\n\nelement.\n\n\n\ne.g. `['demos/index.html', 'demos/extended.html']`",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "attributes": {
                    "description": "The attributes that this element is known to understand.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }
                },
                "properties": {
                    "description": "The properties that this element has.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "events": {
                    "description": "The events that this element fires.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Event"
                    }
                },
                "slots": {
                    "description": "The shadow dom content slots that this element accepts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Slot"
                    }
                },
                "styling": {
                    "description": "Information useful for styling the element and its children.",
                    "type": "object",
                    "properties": {
                        "selectors": {
                            "description": "CSS selectors that the element recognizes on itself for styling.",
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "value": {
                                        "description": "The CSS selector. e.g. `.bright`, `[height=5]`, `[cascade]`.",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A markdown description of the effect of this selector matching\n\non the element.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "value",
                                    "description"
                                ]
                            }
                        },
                        "cssVariables": {
                            "description": "CSS Variables that the element understands.",
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the variable. e.g. `--header-color`, `--my-element-size`",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "The type of the variable. Advisory. e.g. `color`, `size`",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A markdown description of the variable.",
                                        "type": "string"
                                    },
                                    "fallbackBehavior": {
                                        "description": "A markdown description of how the element will fallback if the variable\n\nisn't defined.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        },
                        "needsExplicitSize": {
                            "description": "If true, the element must be given an explicit size by its context.",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "selectors",
                        "cssVariables"
                    ]
                },
                "sourceRange": {
                    "$ref": "#/definitions/SourceRange",
                    "description": "Where this feature is defined in source code."
                },
                "metadata": {
                    "description": "An extension point for framework-specific metadata, as well as any\n\nmetadata not yet standardized here such as what polyfills are needed,\n\nbehaviors and mixins used, the framework that the element was written in,\n\ntags/categories, links to specs that the element implements, etc.\n\n\n\nFramework-specific metadata should be put into a sub-object with the name\n\nof that framework."
                }
            },
            "required": [
                "superclass",
                "path",
                "description",
                "demos",
                "slots",
                "styling"
            ]
        },
        "Attribute": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the attribute. e.g. `value`, `icon`, `should-collapse`.",
                    "type": "string"
                },
                "description": {
                    "description": "A markdown description for the attribute.",
                    "type": "string"
                },
                "type": {
                    "description": "The type that the attribute will be serialized/deserialized as.\n\n\n\ne.g. `string`, `number`, `boolean`, `RegExp`, `Array`, `Object`.",
                    "type": "string"
                },
                "defaultValue": {
                    "description": "The default value of the attribute, if any.\n\n\n\nAs attributes are always strings, this is the actual value, not a human\n\nreadable description.",
                    "type": "string"
                },
                "sourceRange": {
                    "$ref": "#/definitions/SourceRange",
                    "description": "Where this feature is defined in source code."
                },
                "metadata": {
                    "description": "An extension point for framework-specific metadata, as well as any\n\nmetadata not yet standardized here such as what polyfills are needed,\n\nbehaviors and mixins used, the framework that the element was written in,\n\ntags/categories, links to specs that the element implements, etc.\n\n\n\nFramework-specific metadata should be put into a sub-object with the name\n\nof that framework."
                }
            },
            "required": [
                "name"
            ]
        },
        "SourceRange": {
            "type": "object",
            "properties": {
                "file": {
                    "description": "Path to the file containing the definition of the feature,\n\nrelative to the parent feature, or the package if the feature has no parent\n\n(e.g. elements).\n\n\n\nIf blank, the feature is defined in the same file as its parent.",
                    "type": "string"
                },
                "start": {
                    "$ref": "#/definitions/Position"
                },
                "end": {
                    "$ref": "#/definitions/Position"
                }
            },
            "required": [
                "start",
                "end"
            ]
        },
        "Position": {
            "type": "object",
            "properties": {
                "line": {
                    "description": "Line number, starting from zero.",
                    "type": "number"
                },
                "column": {
                    "description": "Column offset within the line, starting from zero.",
                    "type": "number"
                }
            },
            "required": [
                "line",
                "column"
            ]
        },
        "Property": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the property. e.g. `value`, `icon`, `shouldCollapse`.",
                    "type": "string"
                },
                "description": {
                    "description": "A markdown description of the property.",
                    "type": "string"
                },
                "type": {
                    "description": "The javascript type of the property.\n\n\n\nThere's no standard here. Common choices are closure compiler syntax\n\nand typescript syntax.",
                    "type": "string"
                },
                "defaultValue": {
                    "description": "A string representation of the default value. Intended only to be human\n\nreadable, so may be a description, an identifier name, etc.",
                    "type": "string"
                },
                "properties": {
                    "description": "Nested subproperties hanging off of this property.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "sourceRange": {
                    "$ref": "#/definitions/SourceRange",
                    "description": "Where this feature is defined in source code."
                },
                "metadata": {
                    "description": "An extension point for framework-specific metadata, as well as any\n\nmetadata not yet standardized here such as what polyfills are needed,\n\nbehaviors and mixins used, the framework that the element was written in,\n\ntags/categories, links to specs that the element implements, etc.\n\n\n\nFramework-specific metadata should be put into a sub-object with the name\n\nof that framework."
                }
            },
            "required": [
                "name",
                "description",
                "type"
            ]
        },
        "Event": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the event.",
                    "type": "string"
                },
                "description": {
                    "description": "A markdown description of the event.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the event object that's fired.\n\n\n\ne.g. `Event`, `CustomEvent`, `KeyboardEvent`, `MyCustomEvent`.",
                    "type": "string"
                },
                "detail": {
                    "description": "Information about the `detail` field of the event.",
                    "type": "object",
                    "properties": {
                        "properties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Property"
                            }
                        }
                    },
                    "required": [
                        "properties"
                    ]
                },
                "sourceRange": {
                    "$ref": "#/definitions/SourceRange",
                    "description": "Where this feature is defined in source code."
                },
                "metadata": {
                    "description": "An extension point for framework-specific metadata, as well as any\n\nmetadata not yet standardized here such as what polyfills are needed,\n\nbehaviors and mixins used, the framework that the element was written in,\n\ntags/categories, links to specs that the element implements, etc.\n\n\n\nFramework-specific metadata should be put into a sub-object with the name\n\nof that framework."
                }
            },
            "required": [
                "name",
                "description",
                "type"
            ]
        },
        "Slot": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the slot. e.g. `banner`, `body`, `tooltipContents`",
                    "type": "string"
                },
                "description": {
                    "description": "A markdown description of the slot.",
                    "type": "string"
                },
                "sourceRange": {
                    "$ref": "#/definitions/SourceRange",
                    "description": "Where this feature is defined in source code."
                },
                "metadata": {
                    "description": "An extension point for framework-specific metadata, as well as any\n\nmetadata not yet standardized here such as what polyfills are needed,\n\nbehaviors and mixins used, the framework that the element was written in,\n\ntags/categories, links to specs that the element implements, etc.\n\n\n\nFramework-specific metadata should be put into a sub-object with the name\n\nof that framework."
                }
            },
            "required": [
                "name",
                "description"
            ]
        },
        "ElementMixin": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name for this mixin.\n\n\n\ne.g. `MyMixin`, `Polymer.PaperInputMixin`",
                    "type": "string"
                },
                "path": {
                    "description": "The path, relative to the base directory of the package.\n\n\n\ne.g. `paper-input.html` or `app-toolbar/app-toolbar.html` (given that\n\napp-toolbar lives in the app-layout package).",
                    "type": "string"
                },
                "description": {
                    "description": "A markdown description for the element.",
                    "type": "string"
                },
                "demos": {
                    "description": "Paths, relative to the base directory of the package, to demo pages for the\n\nelement.\n\n\n\ne.g. `['demos/index.html', 'demos/extended.html']`",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "attributes": {
                    "description": "The attributes that this element is known to understand.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    }
                },
                "properties": {
                    "description": "The properties that this element has.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "events": {
                    "description": "The events that this element fires.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Event"
                    }
                },
                "slots": {
                    "description": "The shadow dom content slots that this element accepts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Slot"
                    }
                },
                "styling": {
                    "description": "Information useful for styling the element and its children.",
                    "type": "object",
                    "properties": {
                        "selectors": {
                            "description": "CSS selectors that the element recognizes on itself for styling.",
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "value": {
                                        "description": "The CSS selector. e.g. `.bright`, `[height=5]`, `[cascade]`.",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A markdown description of the effect of this selector matching\n\non the element.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "value",
                                    "description"
                                ]
                            }
                        },
                        "cssVariables": {
                            "description": "CSS Variables that the element understands.",
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "The name of the variable. e.g. `--header-color`, `--my-element-size`",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "The type of the variable. Advisory. e.g. `color`, `size`",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A markdown description of the variable.",
                                        "type": "string"
                                    },
                                    "fallbackBehavior": {
                                        "description": "A markdown description of how the element will fallback if the variable\n\nisn't defined.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        },
                        "needsExplicitSize": {
                            "description": "If true, the element must be given an explicit size by its context.",
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "selectors",
                        "cssVariables"
                    ]
                },
                "sourceRange": {
                    "$ref": "#/definitions/SourceRange",
                    "description": "Where this feature is defined in source code."
                },
                "metadata": {
                    "description": "An extension point for framework-specific metadata, as well as any\n\nmetadata not yet standardized here such as what polyfills are needed,\n\nbehaviors and mixins used, the framework that the element was written in,\n\ntags/categories, links to specs that the element implements, etc.\n\n\n\nFramework-specific metadata should be put into a sub-object with the name\n\nof that framework."
                }
            },
            "required": [
                "name",
                "path",
                "description",
                "demos",
                "slots",
                "styling"
            ]
        }
    },
    "$schema": "http://json-schema.org/draft-04/schema#"
}
