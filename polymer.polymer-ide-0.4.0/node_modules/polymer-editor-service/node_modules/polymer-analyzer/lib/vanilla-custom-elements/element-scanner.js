/**
 * @license
 * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const astValue = require("../javascript/ast-value");
const esutil = require("../javascript/esutil");
const jsdoc = require("../javascript/jsdoc");
const model_1 = require("../model/model");
class ElementScanner {
    scan(document, visit) {
        return __awaiter(this, void 0, void 0, function* () {
            const visitor = new ElementVisitor(document);
            yield visit(visitor);
            return visitor.getRegisteredElements();
        });
    }
}
exports.ElementScanner = ElementScanner;
class ElementVisitor {
    constructor(document) {
        this._possibleElements = new Map();
        this._registeredButNotFound = new Map();
        this._elements = [];
        this._document = document;
    }
    enterClassExpression(node, parent) {
        if (parent.type !== 'AssignmentExpression' &&
            parent.type !== 'VariableDeclarator') {
            return;
        }
        const className = astValue.getIdentifierName(parent.type === 'AssignmentExpression' ? parent.left : parent.id);
        if (className == null) {
            return;
        }
        const element = this._handleClass(node);
        if (element) {
            element.className = className;
            this._possibleElements.set(element.className, element);
        }
    }
    enterClassDeclaration(node) {
        const element = this._handleClass(node);
        if (element) {
            element.className = node.id.name;
            this._possibleElements.set(element.className, element);
        }
    }
    _handleClass(node) {
        const element = new model_1.ScannedElement();
        const parsedJsdoc = jsdoc.parseJsdoc(esutil.getAttachedComment(node) || '');
        element.description =
            (parsedJsdoc.description && parsedJsdoc.description.trim() || '');
        element.events = esutil.getEventComments(node);
        element.sourceRange = this._document.sourceRangeForNode(node);
        if (node.superClass && node.superClass.type === 'Identifier') {
            element.superClass = node.superClass.name;
        }
        const observedAttributesDefn = node.body.body.find((m) => {
            if (m.type !== 'MethodDefinition' || !m.static) {
                return false;
            }
            return astValue.getIdentifierName(m.key) === 'observedAttributes';
        });
        if (observedAttributesDefn) {
            const body = observedAttributesDefn.value.body.body[0];
            if (body && body.type === 'ReturnStatement' && body.argument &&
                body.argument.type === 'ArrayExpression') {
                element.attributes =
                    this._extractAttributesFromObservedAttributes(body.argument);
            }
        }
        return element;
    }
    enterCallExpression(node) {
        const callee = astValue.getIdentifierName(node.callee);
        if (!(callee === 'window.customElements.define' ||
            callee === 'customElements.define')) {
            return;
        }
        const tagName = node.arguments[0] && astValue.expressionToValue(node.arguments[0]);
        if (tagName == null || (typeof tagName !== 'string')) {
            return;
        }
        const elementDefn = node.arguments[1];
        if (elementDefn == null) {
            return;
        }
        const element = this._getElement(tagName, elementDefn);
        if (!element) {
            return;
        }
        element.tagName = tagName;
        this._elements.push(element);
    }
    _getElement(tagName, elementDefn) {
        const className = astValue.getIdentifierName(elementDefn);
        if (className) {
            const element = this._possibleElements.get(className);
            if (element) {
                this._possibleElements.delete(className);
                return element;
            }
            else {
                this._registeredButNotFound.set(className, tagName);
                return null;
            }
        }
        if (elementDefn.type === 'ClassExpression') {
            return this._handleClass(elementDefn);
        }
        return null;
    }
    /**
     * Extract attributes from the array expression inside a static
     * observedAttributes method.
     *
     * e.g.
     *     static get observedAttributes() {
     *       return [
     *         /** @type {boolean} When given the element is totally inactive \*\/
     *         'disabled',
     *         /** @type {boolean} When given the element is expanded \*\/
     *         'open'
     *       ];
     *     }
     */
    _extractAttributesFromObservedAttributes(arry) {
        const results = [];
        for (const expr of arry.elements) {
            const value = astValue.expressionToValue(expr);
            if (value && typeof value === 'string') {
                let description = '';
                let type = null;
                const comment = esutil.getAttachedComment(expr);
                if (comment) {
                    const annotation = jsdoc.parseJsdoc(comment);
                    description = annotation.description || description;
                    const tags = annotation.tags || [];
                    for (const tag of tags) {
                        if (tag.tag === 'type') {
                            type = type || tag.type;
                        }
                        description = description || tag.description || '';
                    }
                }
                const attribute = {
                    name: value,
                    description: description,
                    sourceRange: this._document.sourceRangeForNode(expr),
                    astNode: expr,
                    warnings: [],
                };
                if (type) {
                    attribute.type = type;
                }
                results.push(attribute);
            }
        }
        return results;
    }
    /**
     * Gets all found elements. Can only be called once.
     */
    getRegisteredElements() {
        const results = this._elements;
        for (const classAndTag of this._registeredButNotFound.entries()) {
            const className = classAndTag[0];
            const tagName = classAndTag[1];
            const element = this._possibleElements.get(className);
            if (element) {
                element.className = className;
                element.tagName = tagName;
                results.push(element);
            }
        }
        return results;
    }
}

//# sourceMappingURL=element-scanner.js.map
