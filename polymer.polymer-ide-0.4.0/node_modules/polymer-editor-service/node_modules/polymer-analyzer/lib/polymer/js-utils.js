/**
 * @license
 * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const escodegen = require("escodegen");
const esutil_1 = require("../javascript/esutil");
const jsdoc = require("../javascript/jsdoc");
const warning_1 = require("../warning/warning");
/**
 * Converts a estree Property AST node into its Hydrolysis representation.
 */
function toScannedPolymerProperty(node, sourceRange) {
    let type = esutil_1.closureType(node.value, sourceRange);
    if (type === 'Function') {
        if (node.kind === 'get' || node.kind === 'set') {
            type = '';
            node[`${node.kind}ter`] = true;
        }
    }
    const description = jsdoc.removeLeadingAsterisks(esutil_1.getAttachedComment(node) || '').trim();
    const name = esutil_1.objectKeyToString(node.key);
    const warnings = [];
    if (!name) {
        warnings.push({
            code: 'unknown-prop-name',
            message: `Could not determine name of property from expression of type: ${node
                .key.type}`,
            sourceRange: sourceRange,
            severity: warning_1.Severity.WARNING
        });
    }
    const result = {
        name: name || '',
        type: type,
        description: description,
        sourceRange: sourceRange,
        astNode: node, warnings
    };
    if (type === 'Function') {
        const value = node.value;
        result.params =
            (value.params || []).map((param) => {
                // With ES6 we can have a lot of param patterns. Best to leave the
                // formatting to escodegen.
                return { name: escodegen.generate(param) };
            });
    }
    return result;
}
exports.toScannedPolymerProperty = toScannedPolymerProperty;

//# sourceMappingURL=js-utils.js.map
