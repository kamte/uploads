/**
 * @license
 * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
import * as dom5 from 'dom5';
import * as estree from 'estree';
import * as jsdoc from '../javascript/jsdoc';
import { Document, Element, ElementBase, LiteralValue, Property, ScannedAttribute, ScannedElement, ScannedElementBase, ScannedEvent, ScannedProperty, SourceRange } from '../model/model';
import { Warning } from '../warning/warning';
import { Behavior, ScannedBehaviorAssignment } from './behavior';
export interface BasePolymerProperty {
    published?: boolean;
    notify?: boolean;
    observer?: string;
    observerNode?: estree.Expression | estree.Pattern;
    reflectToAttribute?: boolean;
    configuration?: boolean;
    getter?: boolean;
    setter?: boolean;
    function?: boolean;
}
export interface ScannedPolymerProperty extends ScannedProperty, BasePolymerProperty {
}
export interface PolymerProperty extends Property, BasePolymerProperty {
}
export interface ScannedFunction extends ScannedPolymerProperty {
    function: boolean;
    params: {
        name: string;
        type?: string;
    }[];
    return: {
        type: string | null;
        desc: string;
    };
}
export declare function isScannedFunction(d: ScannedProperty): d is ScannedFunction;
export declare class LocalId {
    name: string;
    range: SourceRange;
    constructor(name: string, range: SourceRange);
}
export interface Options {
    tagName?: string;
    className?: string;
    superClass?: string;
    extends?: string;
    jsdoc?: jsdoc.Annotation;
    description?: string;
    properties?: ScannedProperty[];
    attributes?: ScannedAttribute[];
    observers?: {
        javascriptNode: estree.Expression | estree.SpreadElement;
        expression: LiteralValue;
    }[];
    listeners?: {
        event: string;
        handler: string;
    }[];
    behaviors?: ScannedBehaviorAssignment[];
    demos?: {
        desc: string;
        path: string;
    }[];
    events?: ScannedEvent[];
    abstract?: boolean;
    sourceRange: SourceRange | undefined;
}
export interface ScannedPolymerExtension extends ScannedElementBase {
    properties: ScannedPolymerProperty[];
    observers: {
        javascriptNode: estree.Expression | estree.SpreadElement;
        expression: LiteralValue;
    }[];
    listeners: {
        event: string;
        handler: string;
    }[];
    behaviorAssignments: ScannedBehaviorAssignment[];
    domModule?: dom5.Node;
    scriptElement?: dom5.Node;
    pseudo: boolean;
    abstract?: boolean;
    addProperty(prop: ScannedPolymerProperty): void;
}
export declare function addProperty(target: ScannedPolymerExtension, prop: ScannedPolymerProperty): void;
/**
 * The metadata for a single polymer element
 */
export declare class ScannedPolymerElement extends ScannedElement implements ScannedPolymerExtension {
    properties: ScannedPolymerProperty[];
    observers: {
        javascriptNode: estree.Expression | estree.SpreadElement;
        expression: LiteralValue;
    }[];
    listeners: {
        event: string;
        handler: string;
    }[];
    behaviorAssignments: ScannedBehaviorAssignment[];
    domModule?: dom5.Node;
    scriptElement?: dom5.Node;
    pseudo: boolean;
    abstract?: boolean;
    constructor(options?: Options);
    addProperty(prop: ScannedPolymerProperty): void;
    resolve(document: Document): PolymerElement;
}
export interface PolymerExtension extends ElementBase {
    properties: PolymerProperty[];
    observers: {
        javascriptNode: estree.Expression | estree.SpreadElement;
        expression: LiteralValue;
    }[];
    listeners: {
        event: string;
        handler: string;
    }[];
    behaviorAssignments: ScannedBehaviorAssignment[];
    domModule?: dom5.Node;
    scriptElement?: dom5.Node;
    localIds: LocalId[];
    abstract?: boolean;
    emitPropertyMetadata(property: PolymerProperty): any;
}
export declare class PolymerElement extends Element implements PolymerExtension {
    properties: PolymerProperty[];
    observers: {
        javascriptNode: estree.Expression | estree.SpreadElement;
        expression: LiteralValue;
    }[];
    listeners: {
        event: string;
        handler: string;
    }[];
    behaviorAssignments: ScannedBehaviorAssignment[];
    domModule?: dom5.Node;
    scriptElement?: dom5.Node;
    localIds: LocalId[];
    abstract?: boolean;
    constructor();
    emitPropertyMetadata(property: PolymerProperty): {
        polymer: any;
    };
}
export declare function getFlattenedAndResolvedBehaviors(behaviorAssignments: ScannedBehaviorAssignment[], document: Document): {
    resolvedBehaviors: Set<Behavior>;
    warnings: Warning[];
};
