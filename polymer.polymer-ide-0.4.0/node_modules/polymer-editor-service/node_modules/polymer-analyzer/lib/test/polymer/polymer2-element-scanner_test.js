/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = require("fs");
const path = require("path");
const javascript_parser_1 = require("../../javascript/javascript-parser");
const model_1 = require("../../model/model");
const polymer2_element_scanner_1 = require("../../polymer/polymer2-element-scanner");
function compareTagNames(a, b) {
    const tagNameA = a && a.tagName;
    const tagNameB = b && b.tagName;
    if (tagNameA == null)
        return (tagNameB == null) ? 0 : -1;
    if (tagNameB == null)
        return 1;
    return tagNameA.localeCompare(tagNameB);
}
;
suite('Polymer2ElementScanner', () => {
    let document;
    let elements;
    let elementsList;
    suiteSetup(() => __awaiter(this, void 0, void 0, function* () {
        const parser = new javascript_parser_1.JavaScriptParser();
        const file = fs.readFileSync(path.resolve(__dirname, '../static/polymer2/test-element.js'), 'utf8');
        document = parser.parse(file, '/static/polymer2/test-element.js');
        const scanner = new polymer2_element_scanner_1.Polymer2ElementScanner();
        const visit = (visitor) => Promise.resolve(document.visit([visitor]));
        const features = yield scanner.scan(document, visit);
        elements = new Map();
        elementsList =
            features.filter((e) => e instanceof model_1.ScannedElement);
        for (const element of elementsList) {
            elements.set(element.tagName, element);
        }
    }));
    test('Finds elements', () => {
        const sortedElements = elementsList.sort(compareTagNames);
        const elementData = sortedElements.map((e) => ({
            tagName: e.tagName,
            className: e.className,
            superClass: e.superClass,
            properties: e.properties.map((p) => ({
                name: p.name,
            })),
            attributes: e.attributes.map((a) => ({
                name: a.name,
            })),
        }));
        chai_1.assert.deepEqual(elementData, [
            {
                tagName: undefined,
                className: 'BaseElement',
                superClass: 'Polymer.Element',
                properties: [{
                        name: 'foo',
                    }],
                attributes: [{
                        name: 'foo',
                    }],
            },
            {
                tagName: 'test-element',
                className: 'TestElement',
                superClass: 'Polymer.Element',
                properties: [{
                        name: 'foo',
                    }],
                attributes: [{
                        name: 'foo',
                    }],
            }
        ].sort(compareTagNames));
    });
});

//# sourceMappingURL=polymer2-element-scanner_test.js.map
