import { Options as AnalyzerOptions } from 'polymer-analyzer';
import { Element, SourceRange } from 'polymer-analyzer/lib/model/model';
import { Warning } from 'polymer-analyzer/lib/warning/warning';
import { EditorService, SourcePosition, TypeaheadCompletion } from './editor-service';
export interface Options extends AnalyzerOptions {
    polymerJsonPath?: string;
}
export declare class LocalEditorService extends EditorService {
    private readonly _analyzer;
    private readonly _linter;
    constructor(options: Options);
    fileChanged(localPath: string, contents?: string): Promise<void>;
    getDocumentationAtPosition(localPath: string, position: SourcePosition): Promise<string | undefined>;
    getDefinitionForFeatureAtPosition(localPath: string, position: SourcePosition): Promise<SourceRange | undefined>;
    getReferencesForFeatureAtPosition(localPath: string, position: SourcePosition): Promise<SourceRange[] | undefined>;
    getTypeaheadCompletionsAtPosition(localPath: string, position: SourcePosition): Promise<TypeaheadCompletion | undefined>;
    _createSortPrefixes(element: Element): Map<string | undefined, string>;
    _generateAutoCompletionForElement(e: Element): string;
    private getAncestorDomModuleForElement(document, element);
    getWarningsForFile(localPath: string): Promise<Warning[]>;
    _clearCaches(): Promise<void>;
    private _getFeatureAt(localPath, position);
    private _getLocationResult(document, position);
}
